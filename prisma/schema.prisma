generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model assignments {
  idAssigment       Int              @id @default(autoincrement())
  titleAssignment   String?          @db.VarChar(255)
  contentAssignment String?          @db.VarChar(255)
  assignmentuser    assignmentuser[]
  lessons           lessons[]
}

model assignmentuser {
  idAssignmentUser Int         @id @default(autoincrement())
  assignmentId     Int
  userId           Int
  statusId         Int
  assignments      assignments @relation(fields: [assignmentId], references: [idAssigment], onDelete: NoAction, onUpdate: NoAction, map: "FK_Assignment_AssignmentUser")
  statustype       statustype  @relation(fields: [statusId], references: [idStatusType], onDelete: NoAction, onUpdate: NoAction, map: "FK_Status_AssignmentUser")
  users            users       @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_AssignmentUser")

  @@index([assignmentId], map: "FK_Assignment_AssignmentUser_idx")
  @@index([statusId], map: "FK_Status_AssignmentUser_idx")
  @@index([userId], map: "FK_User_AssignmentUser_idx")
}

model chapters {
  idChapter    Int       @id @default(autoincrement())
  titleChapter String?   @db.VarChar(255)
  courseId     Int
  isFree       Int?
  order        Int?
  description  String?   @db.VarChar(255)
  courses      courses   @relation(fields: [courseId], references: [idCourse], onDelete: NoAction, onUpdate: NoAction, map: "FK_Course_Chapter")
  lessons      lessons[]

  @@index([courseId], map: "FK_Course_Chapter_idx")
}

model comments {
  idComments     Int       @id @default(autoincrement())
  contentComment String?   @db.VarChar(255)
  userId         Int
  answerUserId   Int
  date           DateTime? @db.DateTime(0)
  users          users     @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Comments")

  @@index([userId], map: "FK_User_Comments_idx")
}

model courses {
  idCourse    Int          @id @default(autoincrement())
  titleCourse String?      @db.VarChar(255)
  price       Int?
  introduce   String?      @db.VarChar(255)
  image       String?      @db.VarChar(255)
  teacherId   Int
  isPublic    Int?
  chapters    chapters[]
  users       users        @relation(fields: [teacherId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Course")
  courseuser  courseuser[]

  @@index([teacherId], map: "FK_User_Course_idx")
}

model courseuser {
  idCourseUser Int        @id @default(autoincrement())
  userId       Int
  courseId     Int
  statusId     Int
  courses      courses    @relation(fields: [courseId], references: [idCourse], onDelete: NoAction, onUpdate: NoAction, map: "FK_Course_CourseUser")
  statustype   statustype @relation(fields: [statusId], references: [idStatusType], onDelete: NoAction, onUpdate: NoAction, map: "FK_Status_CourseUser")
  users        users      @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_CourseUser")

  @@index([courseId], map: "FK_Course_CourseUser_idx")
  @@index([statusId], map: "FK_Status_CourseUser_idx")
  @@index([userId], map: "FK_User_CourseUser_idx")
}

model documents {
  idDocument    Int       @id @default(autoincrement())
  titleDocument String?   @db.VarChar(255)
  url           String?   @db.VarChar(255)
  lessons       lessons[]
}

model lessons {
  idLessons    Int          @id @default(autoincrement())
  titleLessons String?      @db.VarChar(255)
  chapterId    Int
  isFree       Int?
  order        Int?
  video        String?      @db.VarChar(255)
  documentId   Int
  quizzId      Int
  assignmentId Int
  assignments  assignments  @relation(fields: [assignmentId], references: [idAssigment], onDelete: NoAction, onUpdate: NoAction, map: "FK_Assignment_Lessons")
  chapters     chapters     @relation(fields: [chapterId], references: [idChapter], onDelete: NoAction, onUpdate: NoAction, map: "FK_Chapter_Lessons")
  documents    documents    @relation(fields: [documentId], references: [idDocument], onDelete: NoAction, onUpdate: NoAction, map: "FK_Document_Lessons")
  quizzs       quizzs       @relation(fields: [quizzId], references: [idQuizz], onDelete: NoAction, onUpdate: NoAction, map: "FK_Quizz_Lessons")
  lessonuser   lessonuser[]
  notes        notes[]

  @@index([assignmentId], map: "FK_Assignment_Lessons_idx")
  @@index([chapterId], map: "FK_Chapter_Lessons_idx")
  @@index([documentId], map: "FK_Document_Chapter_idx")
  @@index([quizzId], map: "FK_Quizz_Lesson_idx")
}

model lessonuser {
  idLessonUser Int        @id @default(autoincrement())
  userId       Int
  lessonId     Int
  statusId     Int
  lessons      lessons    @relation(fields: [lessonId], references: [idLessons], onDelete: NoAction, onUpdate: NoAction, map: "FK_Lesson_LessonUser")
  statustype   statustype @relation(fields: [statusId], references: [idStatusType], onDelete: NoAction, onUpdate: NoAction, map: "FK_Status_LessonUser")
  users        users      @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_LessonUser")

  @@index([lessonId], map: "FK_Lesson_LessonUser_idx")
  @@index([statusId], map: "FK_Status_LessonUser_idx")
  @@index([userId], map: "FK_User_LessonUser_idx")
}

model notes {
  idNotes     Int     @id @default(autoincrement())
  contentNote String? @db.VarChar(255)
  userId      Int
  lessonId    Int
  lessons     lessons @relation(fields: [lessonId], references: [idLessons], onDelete: NoAction, onUpdate: NoAction, map: "FK_Lesson_Note")
  users       users   @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Note")

  @@index([lessonId], map: "FK_Lesson_Note_idx")
  @@index([userId], map: "FK_User_Note_idx")
}

model notifications {
  idNotification      Int       @id @default(autoincrement())
  userId              Int
  contentNotification String?   @db.VarChar(255)
  date                DateTime? @db.DateTime(0)
  users               users     @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Notification")

  @@index([userId], map: "FK_User_Notification_idx")
}

model questions {
  idQuestion     Int          @id
  questionTypeId Int
  content        String?      @db.VarChar(255)
  Acontent       String?      @db.VarChar(255)
  Bcontent       String?      @db.VarChar(255)
  Ccontent       String?      @db.VarChar(255)
  Dcontent       String?      @db.VarChar(255)
  answer         String?      @db.VarChar(255)
  quizzId        Int
  questiontype   questiontype @relation(fields: [questionTypeId], references: [idQuestionType], onDelete: NoAction, onUpdate: NoAction, map: "FK_QuestionType")
  quizzs         quizzs       @relation(fields: [quizzId], references: [idQuizz], onDelete: NoAction, onUpdate: NoAction, map: "FK_Quizz_Question")

  @@index([questionTypeId], map: "FK_QuestionType_idx")
  @@index([quizzId], map: "FK_Quizz_Question_idx")
}

model questiontype {
  idQuestionType   Int         @id @default(autoincrement())
  nameQuestionType String?     @db.VarChar(255)
  questions        questions[]
}

model quizzs {
  idQuizz     Int         @id @default(autoincrement())
  nameQuizz   String?     @db.VarChar(255)
  description String?     @db.VarChar(255)
  lessons     lessons[]
  questions   questions[]
  quizzuser   quizzuser[]
}

model quizzuser {
  idQuizzUser Int        @id @default(autoincrement())
  quizzId     Int
  userId      Int
  statusId    Int
  quizzs      quizzs     @relation(fields: [quizzId], references: [idQuizz], onDelete: NoAction, onUpdate: NoAction, map: "FK_Quizz_QuizzUser")
  statustype  statustype @relation(fields: [statusId], references: [idStatusType], onDelete: NoAction, onUpdate: NoAction, map: "FK_Status_QuizzUser")
  users       users      @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_QuizzUser")

  @@index([quizzId], map: "FK_Quizz_QuizzUser_idx")
  @@index([statusId], map: "FK_Status_QuizzUser_idx")
  @@index([userId], map: "FK_User_QuizzUser_idx")
}

model role {
  idRole   Int     @id @default(autoincrement())
  nameRole String? @db.VarChar(255)
  users    users[]
}

model statustype {
  idStatusType   Int              @id @default(autoincrement())
  nameStatusType String?          @db.VarChar(255)
  assignmentuser assignmentuser[]
  courseuser     courseuser[]
  lessonuser     lessonuser[]
  quizzuser      quizzuser[]
}

model users {
  idUser         Int              @id @default(autoincrement())
  username       String           @db.VarChar(255)
  roleId         Int
  password       String           @db.VarChar(255)
  assignmentuser assignmentuser[]
  comments       comments[]
  courses        courses[]
  courseuser     courseuser[]
  lessonuser     lessonuser[]
  notes          notes[]
  notifications  notifications[]
  quizzuser      quizzuser[]
  role           role             @relation(fields: [roleId], references: [idRole], onDelete: NoAction, onUpdate: NoAction, map: "FK_Role_User")

  @@index([roleId], map: "FK_Role_User_idx")
}
